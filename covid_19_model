{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.applications import VGG19, ResNet50\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport cv2\nimport random","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:28:42.340986Z","iopub.execute_input":"2025-02-08T13:28:42.341270Z","iopub.status.idle":"2025-02-08T13:28:55.321887Z","shell.execute_reply.started":"2025-02-08T13:28:42.341247Z","shell.execute_reply":"2025-02-08T13:28:55.320923Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"#Install gdown library to connect google drive \n!pip install gdown","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:28:55.323033Z","iopub.execute_input":"2025-02-08T13:28:55.323697Z","iopub.status.idle":"2025-02-08T13:28:59.377620Z","shell.execute_reply.started":"2025-02-08T13:28:55.323664Z","shell.execute_reply":"2025-02-08T13:28:59.376523Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (5.2.0)\nRequirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown) (4.12.3)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown) (3.17.0)\nRequirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown) (2.32.3)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown) (4.67.1)\nRequirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown) (2.6)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2025.1.31)\nRequirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (1.7.1)\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Extracting files form google drive\nimport gdown\n\n# Extract the file ID from your Google Drive link\nfile_id = \"1M9jvYwibyIQMuPlYdB0FQjgLcEKCeAnm\"\n\n# Construct the direct download URL\nurl = f\"https://drive.google.com/uc?id={file_id}\"\n\n# Define the output file name\noutput = \"Covid_19\"\n\n# Download the file\ngdown.download(url, output, quiet=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:29:22.832183Z","iopub.execute_input":"2025-02-08T13:29:22.832646Z","iopub.status.idle":"2025-02-08T13:29:40.739829Z","shell.execute_reply.started":"2025-02-08T13:29:22.832606Z","shell.execute_reply":"2025-02-08T13:29:40.738818Z"}},"outputs":[{"name":"stderr","text":"Downloading...\nFrom (original): https://drive.google.com/uc?id=1M9jvYwibyIQMuPlYdB0FQjgLcEKCeAnm\nFrom (redirected): https://drive.google.com/uc?id=1M9jvYwibyIQMuPlYdB0FQjgLcEKCeAnm&confirm=t&uuid=6168b24a-6fa6-4379-83bd-1f13015d9b42\nTo: /kaggle/working/Covid_19\n100%|██████████| 778M/778M [00:13<00:00, 58.2MB/s] \n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'Covid_19'"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"#installing rar library \n!pip install rarfile","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:29:48.720807Z","iopub.execute_input":"2025-02-08T13:29:48.721426Z","iopub.status.idle":"2025-02-08T13:29:52.349119Z","shell.execute_reply.started":"2025-02-08T13:29:48.721374Z","shell.execute_reply":"2025-02-08T13:29:52.347843Z"}},"outputs":[{"name":"stdout","text":"Collecting rarfile\n  Downloading rarfile-4.2-py3-none-any.whl.metadata (4.4 kB)\nDownloading rarfile-4.2-py3-none-any.whl (29 kB)\nInstalling collected packages: rarfile\nSuccessfully installed rarfile-4.2\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import os\n\nfile_path = \"/kaggle/working/Covid_19\"\n\n# Check the file type\nprint(\"File Type:\", os.popen(f'file \"{file_path}\"').read())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:29:54.321729Z","iopub.execute_input":"2025-02-08T13:29:54.322075Z","iopub.status.idle":"2025-02-08T13:29:54.340128Z","shell.execute_reply.started":"2025-02-08T13:29:54.322043Z","shell.execute_reply":"2025-02-08T13:29:54.339465Z"}},"outputs":[{"name":"stdout","text":"File Type: /kaggle/working/Covid_19: RAR archive data, v5\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"#changing the file name\nimport os\n\nold_path = \"/kaggle/working/Covid_19\"\nnew_path = \"/kaggle/working/Covid_19.rar\"\n\n# Rename the file\nos.rename(old_path, new_path)\n\nprint(\"File renamed successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:29:58.062305Z","iopub.execute_input":"2025-02-08T13:29:58.062673Z","iopub.status.idle":"2025-02-08T13:29:58.067558Z","shell.execute_reply.started":"2025-02-08T13:29:58.062645Z","shell.execute_reply":"2025-02-08T13:29:58.066785Z"}},"outputs":[{"name":"stdout","text":"File renamed successfully!\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Extracting all the files from google.  \nimport rarfile\n\n# Path to renamed RAR file\nrar_path = \"/kaggle/working/Covid_19.rar\"\n\n# Set extraction folder\nextract_path = \"/kaggle/working/dataset\"\n\n# Ensure the extraction folder exists\nos.makedirs(extract_path, exist_ok=True)\n\n# Extract the RAR file\nwith rarfile.RarFile(rar_path, 'r') as rf:\n    rf.extractall(extract_path)\n\nprint(\"RAR file extracted successfully!\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:30:03.992178Z","iopub.execute_input":"2025-02-08T13:30:03.992514Z","iopub.status.idle":"2025-02-08T13:30:12.381185Z","shell.execute_reply.started":"2025-02-08T13:30:03.992484Z","shell.execute_reply":"2025-02-08T13:30:12.380203Z"}},"outputs":[{"name":"stdout","text":"RAR file extracted successfully!\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"train_dir = \"/kaggle/working/dataset/Covid_train_test/training\"\ntest_dir = \"/kaggle/working/dataset/Covid_train_test/testing\"\n\nprint(\"Training set categories:\", os.listdir(train_dir))\nprint(\"Testing set categories:\", os.listdir(test_dir))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:04.615089Z","iopub.execute_input":"2025-02-08T13:31:04.615478Z","iopub.status.idle":"2025-02-08T13:31:04.621325Z","shell.execute_reply.started":"2025-02-08T13:31:04.615446Z","shell.execute_reply":"2025-02-08T13:31:04.620440Z"}},"outputs":[{"name":"stdout","text":"Training set categories: ['Normal', 'Lung Opacity', 'Viral Phneumonia', 'COVID']\nTesting set categories: ['Normal', 'Lung Opacity', 'Viral Phnemonia', 'COVID']\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"\n# Function to count images in each class\ndef count_images(directory):\n    for class_name in os.listdir(directory):\n        class_path = os.path.join(directory, class_name)\n        if os.path.isdir(class_path):\n            print(f\"Class: {class_name}, Images: {len(os.listdir(class_path))}\")\n\n# Check training images\nprint(\"Training Data:\")\ncount_images(train_dir)\n\n\n# Check testing images\nprint(\"\\nTesting Data:\")\ncount_images(test_dir)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:12.476862Z","iopub.execute_input":"2025-02-08T13:31:12.477201Z","iopub.status.idle":"2025-02-08T13:31:12.495139Z","shell.execute_reply.started":"2025-02-08T13:31:12.477172Z","shell.execute_reply":"2025-02-08T13:31:12.494214Z"}},"outputs":[{"name":"stdout","text":"Training Data:\nClass: Normal, Images: 8153\nClass: Lung Opacity, Images: 4809\nClass: Viral Phneumonia, Images: 1076\nClass: COVID, Images: 2892\n\nTesting Data:\nClass: Normal, Images: 2040\nClass: Lung Opacity, Images: 1203\nClass: Viral Phnemonia, Images: 236\nClass: COVID, Images: 724\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# As we can see in training Data Viral Phneumonia and COVID are smaller so i will\n# light augmentation on it.\n# I need to apply augmentation only to specific classes. Unfortunately, ImageDataGenerator applies augmentation to all classes, so we use a custom approach:\n# Create custom data generators for each class\n\n# Define light augmentation settings\nlight_aug = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=30,          # Larger rotations for more variability\n    width_shift_range=0.3,      # Significant horizontal shifts (up to 30%)\n    height_shift_range=0.3,     # Significant vertical shifts (up to 30%)\n    zoom_range=0.3,             # Stronger zoom-in/zoom-out effect\n    shear_range=0.2,            # Added shear transformation for more distortion\n    brightness_range=[0.8, 1.2],# Slight changes in brightness to simulate different exposure\n    horizontal_flip=True,       # Maintains random flipping for robustness\n    fill_mode='nearest',        # Filling in gaps created by transformations\n    validation_split=0.2        # 80% for training, 20% for validation\n)\n\n# No augmentation for other classes\nnormal_aug = ImageDataGenerator(rescale=1./255, validation_split=0.2)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:23.293049Z","iopub.execute_input":"2025-02-08T13:31:23.293352Z","iopub.status.idle":"2025-02-08T13:31:23.298140Z","shell.execute_reply.started":"2025-02-08T13:31:23.293330Z","shell.execute_reply":"2025-02-08T13:31:23.297099Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Training Generators\n# Paths for each class\ncovid_dir = os.path.join(train_dir, 'COVID')\nviral_pneumonia_dir = os.path.join(train_dir, 'Viral Pneumonia')\nnormal_dir = os.path.join(train_dir, 'Normal')\nlung_opacity_dir = os.path.join(train_dir, 'Lung Opacity')\n\n# Apply augmentation to COVID\ntrain_covid = light_aug.flow_from_directory(\n    train_dir,\n    classes=['COVID'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='training'\n)\nprint(f\"Found {train_covid.samples} images belonging to class: {list(train_covid.class_indices.keys())[0]}\")\n\n# Apply augmentation to Viral Pneumonia\ntrain_viral_pneumonia = light_aug.flow_from_directory(\n    train_dir,\n    classes=['Viral Phneumonia'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='training'\n)\nprint(f\"Found {train_viral_pneumonia.samples} images belonging to class: {list(train_viral_pneumonia.class_indices.keys())[0]}\")\n\n# No augmentation for Normal\ntrain_normal = normal_aug.flow_from_directory(\n    train_dir,\n    classes=['Normal'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='training'\n)\nprint(f\"Found {train_normal.samples} images belonging to class: {list(train_normal.class_indices.keys())[0]}\")\n\n# No augmentation for Lung Opacity\ntrain_lung_opacity = normal_aug.flow_from_directory(\n    train_dir,\n    classes=['Lung Opacity'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='training'\n)\nprint(f\"Found {train_lung_opacity.samples} images belonging to class: {list(train_lung_opacity.class_indices.keys())[0]}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:32.123459Z","iopub.execute_input":"2025-02-08T13:31:32.123772Z","iopub.status.idle":"2025-02-08T13:31:32.334622Z","shell.execute_reply.started":"2025-02-08T13:31:32.123747Z","shell.execute_reply":"2025-02-08T13:31:32.333779Z"}},"outputs":[{"name":"stdout","text":"Found 2314 images belonging to 1 classes.\nFound 2314 images belonging to class: COVID\nFound 861 images belonging to 1 classes.\nFound 861 images belonging to class: Viral Phneumonia\nFound 6523 images belonging to 1 classes.\nFound 6523 images belonging to class: Normal\nFound 3848 images belonging to 1 classes.\nFound 3848 images belonging to class: Lung Opacity\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"#Validation Generators\nval_covid = light_aug.flow_from_directory(\n    train_dir,\n    classes=['COVID'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='validation'\n)\n\nval_viral_pneumonia = light_aug.flow_from_directory(\n    train_dir,\n    classes=['Viral Phneumonia'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='validation'\n)\n\nval_normal = normal_aug.flow_from_directory(\n    train_dir,\n    classes=['Normal'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='validation'\n)\n\nval_lung_opacity = normal_aug.flow_from_directory(\n    train_dir,\n    classes=['Lung Opacity'],\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='validation'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:37.425635Z","iopub.execute_input":"2025-02-08T13:31:37.425961Z","iopub.status.idle":"2025-02-08T13:31:37.511096Z","shell.execute_reply.started":"2025-02-08T13:31:37.425933Z","shell.execute_reply":"2025-02-08T13:31:37.510432Z"}},"outputs":[{"name":"stdout","text":"Found 578 images belonging to 1 classes.\nFound 215 images belonging to 1 classes.\nFound 1630 images belonging to 1 classes.\nFound 961 images belonging to 1 classes.\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Combining Training Generator\nimport numpy as np\n\ndef combined_generator():\n    while True:\n        # Get the next batch of each class\n        covid_batch = next(train_covid)\n        pneumonia_batch = next(train_viral_pneumonia)\n        normal_batch = next(train_normal)\n        opacity_batch = next(train_lung_opacity)\n\n        # Concatenate the images and labels from all the classes\n        images = np.concatenate([covid_batch[0], pneumonia_batch[0], normal_batch[0], opacity_batch[0]])\n        labels = np.concatenate([covid_batch[1], pneumonia_batch[1], normal_batch[1], opacity_batch[1]])\n\n        # Shuffle the combined batch\n        indices = np.arange(images.shape[0])\n        np.random.shuffle(indices)\n\n        yield images[indices], labels[indices]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:42.729267Z","iopub.execute_input":"2025-02-08T13:31:42.729599Z","iopub.status.idle":"2025-02-08T13:31:42.734495Z","shell.execute_reply.started":"2025-02-08T13:31:42.729573Z","shell.execute_reply":"2025-02-08T13:31:42.733464Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Comnining Validation Generator\ndef combined_val_generator():\n    while True:\n        # Get the next batch of each class\n        covid_batch = next(val_covid)\n        pneumonia_batch = next(val_viral_pneumonia)\n        normal_batch = next(val_normal)\n        opacity_batch = next(val_lung_opacity)\n\n        # Concatenate the images and labels from all the classes\n        images = np.concatenate([covid_batch[0], pneumonia_batch[0], normal_batch[0], opacity_batch[0]])\n        labels = np.concatenate([covid_batch[1], pneumonia_batch[1], normal_batch[1], opacity_batch[1]])\n\n        # Shuffle the combined batch\n        indices = np.arange(images.shape[0])\n        np.random.shuffle(indices)\n\n        yield images[indices], labels[indices]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:46.328211Z","iopub.execute_input":"2025-02-08T13:31:46.328512Z","iopub.status.idle":"2025-02-08T13:31:46.333592Z","shell.execute_reply.started":"2025-02-08T13:31:46.328488Z","shell.execute_reply":"2025-02-08T13:31:46.332358Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# EarlyStopping Callback\n\nearly_stopping = EarlyStopping(\n    monitor='val_loss',   # Stop when validation loss stops improving\n    patience=5,           # Wait for 5 epochs before stopping\n    restore_best_weights=True  # Restore the best model weights\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:31:49.439880Z","iopub.execute_input":"2025-02-08T13:31:49.440166Z","iopub.status.idle":"2025-02-08T13:31:49.444158Z","shell.execute_reply.started":"2025-02-08T13:31:49.440143Z","shell.execute_reply":"2025-02-08T13:31:49.443299Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Load pre-trained VGG19 model as feature extractor\nbase_model = VGG19(input_shape=(224,224,3), include_top=False, weights='imagenet')\n\n# Freeze VGG19 layers\nfor layer in base_model.layers:\n    layer.trainable = False\n\n# Define the custom model with VGG19 as the feature extractor\nmodel = Sequential([\n    base_model,               # Pretrained VGG19\n    Flatten(),                # Converts feature maps into a 1D vector\n    Dense(512, activation='relu'),  # Fully connected layer with 512 neurons\n    Dropout(0.5),             # Dropout (50%) to prevent overfitting\n    Dense(4, activation='softmax') # Output layer with 4 classes (COVID, Lung Opacity, Normal, Pneumonia)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:32:03.153973Z","iopub.execute_input":"2025-02-08T13:32:03.154254Z","iopub.status.idle":"2025-02-08T13:32:06.131218Z","shell.execute_reply.started":"2025-02-08T13:32:03.154232Z","shell.execute_reply":"2025-02-08T13:32:06.130559Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m80134624/80134624\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# Calculate steps per epoch\nsteps_per_epoch = (\n    train_covid.samples +\n    train_viral_pneumonia.samples +\n    train_normal.samples +\n    train_lung_opacity.samples\n)\n\n# Validation steps\nval_steps = (\n    val_covid.samples +\n    val_viral_pneumonia.samples +\n    val_normal.samples +\n    val_lung_opacity.samples)\n\n# Train the model with early stopping\nhistory = model.fit(\n    combined_generator(),\n    steps_per_epoch=steps_per_epoch,\n    validation_data=combined_val_generator(),\n    validation_steps=val_steps,\n    epochs=50,\n    callbacks=[early_stopping]\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-08T13:32:10.331383Z","iopub.execute_input":"2025-02-08T13:32:10.331738Z","iopub.status.idle":"2025-02-08T18:28:59.544057Z","shell.execute_reply.started":"2025-02-08T13:32:10.331709Z","shell.execute_reply":"2025-02-08T18:28:59.542374Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m13546/13546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9995 - loss: 0.0010","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-e30da73a4010>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Train the model with early stopping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0mcombined_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001b[0m\n\u001b[1;32m    343\u001b[0m                         \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m                     )\n\u001b[0;32m--> 345\u001b[0;31m                 val_logs = self.evaluate(\n\u001b[0m\u001b[1;32m    346\u001b[0m                     \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_x\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m                     \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_y\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mepoch_iterator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menumerate_epoch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m                 \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m                 \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtest_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    434\u001b[0m                 \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pythonify_logs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m                 \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    831\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    876\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    877\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 878\u001b[0;31m       results = tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    879\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    880\u001b[0m       )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1320\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1321\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1322\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1323\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1324\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1550\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1552\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1553\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1554\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":19},{"cell_type":"code","source":"# Plot training & validation accuracy and loss\nplt.figure(figsize=(12, 5))\n\n# Accuracy\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend()\nplt.title('Model Accuracy')\n\n# Loss\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend()\nplt.title('Model Loss')\n\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}